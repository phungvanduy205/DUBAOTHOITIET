using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Http;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Windows.Forms.DataVisualization.Charting;
using Microsoft.Web.WebView2.WinForms;

namespace THOITIET
{
    /// <summary>
    /// Form ch√≠nh: x·ª≠ l√Ω s·ª± ki·ªán, g·ªçi d·ªãch v·ª•, c·∫≠p nh·∫≠t giao di·ªán
    /// </summary>
    public partial class Form1 : Form
    {
        // C·ªù ƒë∆°n v·ªã: true = ¬∞C (metric), false = ¬∞F (imperial)
        private bool donViCelsius = true;

        // D·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ API
        private OneCallResponse weatherData;
        private string currentLocation = "";
        private double currentLat = 0;
        private double currentLon = 0;

        // K·∫øt n·ªëi DB l∆∞u ƒë·ªãa ƒëi·ªÉm
        private readonly string sqlConnectionString = "Server=(localdb)\\MSSQLLocalDB;Database=THOITIET;Trusted_Connection=True;TrustServerCertificate=True";
        private LocationRepository? locationRepo;

        // Danh s√°ch ƒë·ªãa ƒëi·ªÉm ƒë√£ l∆∞u (gi·ªØ ƒë·ªÉ binding UI, ngu·ªìn l·∫•y t·ª´ DB)
        private List<SavedLocation> savedLocations = new List<SavedLocation>();
        // private const string SAVED_LOCATIONS_FILE = "saved_locations.txt"; // Deprecated: d√πng DB

        // Timer t·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ªói 1 gi·ªù
        private readonly System.Windows.Forms.Timer dongHoCapNhat = new System.Windows.Forms.Timer();

        // D·ªãch v·ª• g·ªçi API
        private readonly DichVuThoiTiet dichVu = new DichVuThoiTiet();

        // B·ªô nh·ªõ t·∫°m d·ªØ li·ªáu ƒë·ªÉ xu·∫•t CSV

        // C√°c fields m·ªõi cho t√≠nh nƒÉng n√¢ng cao
        private PictureBox? backgroundPictureBox;
        private Chart? temperatureChart;
        private WebView2? windyView;
        private TabControl? tabChartMap;
        private const string WINDY_API_KEY = "NI44O5nRjXST4TKiDk0x7hzaWnpHHiCP";
        private List<FavoriteLocation> favoriteLocations = new List<FavoriteLocation>();
        private int selectedDayIndex = 0; // Ng√†y ƒë∆∞·ª£c ch·ªçn trong d·ª± b√°o 5 ng√†y

        // Throttle n·ªÅn: l∆∞u tr·∫°ng th√°i l·∫ßn tr∆∞·ªõc
        private int? lastWeatherId = null;
        private bool? lastIsNight = null;

        // UI segmented runtime (kh√¥ng d√πng n·ªØa khi c√≥ UnitToggle designer)
        // C√°c bi·∫øn btnC, btnF, donViSegment ƒë√£ ƒë∆∞·ª£c x√≥a v√¨ gi·ªù d√πng UnitToggle trong Designer
        
        // L∆∞u ƒë·ªãa ƒëi·ªÉm
        private List<string> savedLocationNames = new List<string>();
        private int currentLocationIndex = 0;
        private string locationsFilePath = "saved_locations.json";

        public Form1()
        {
            System.Diagnostics.Debug.WriteLine("=== FORM1 CONSTRUCTOR START ===");
            InitializeComponent();
            CauHinhKhoiTao();
            ApDungStyleGlassmorphism();

            // Kh√¥ng t·∫°o segmented runtime n·ªØa (ƒë√£ c√≥ UnitToggle trong Designer)
            
            // ƒê·ªìng b·ªô h√≥a donViCelsius v·ªõi unitToggle.IsCelsius
            donViCelsius = unitToggle.IsCelsius;
            
            // ƒêƒÉng k√Ω event UnitChanged ƒë·ªÉ c·∫≠p nh·∫≠t hi·ªÉn th·ªã t·ª´ d·ªØ li·ªáu Kelvin
            unitToggle.UnitChanged += async (sender, isCelsius) => {
                donViCelsius = isCelsius;
                System.Diagnostics.Debug.WriteLine($"UnitToggle changed to: {(isCelsius ? "Celsius" : "Fahrenheit")}");
                if (weatherData != null)
                    await CapNhatThoiTiet();
            };
            
            // Bo tr√≤n thanh t√¨m ki·∫øm
            this.Load += (s, e) => {
                ApplyRoundedCorners(oTimKiemDiaDiem, 10);
                ApplyRoundedCorners(khung24Gio, 15);
                ApplyRoundedCorners(khung5Ngay, 15);
            };
            
            // Kh·ªüi t·∫°o DB l∆∞u ƒë·ªãa ƒëi·ªÉm
            try
            {
                locationRepo = new LocationRepository(sqlConnectionString);
                locationRepo.EnsureCreated();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"EnsureCreated DB error: {ex.Message}");
            }

            NapDiaDiemDaLuu();

            // X√≥a panel g·ª£i √Ω c≈© n·∫øu c√≥
            var oldSuggestionPanel = Controls.Find("suggestionPanel", true).FirstOrDefault();
            if (oldSuggestionPanel != null)
            {
                Controls.Remove(oldSuggestionPanel);
                oldSuggestionPanel.Dispose();
            }

            // T·∫°o background ƒë·ªông
            InitializeBackgroundPictureBox();
            
            // Set background m·∫∑c ƒë·ªãnh ngay khi kh·ªüi ƒë·ªông d·ª±a tr√™n th·ªùi gian hi·ªán t·∫°i
            System.Diagnostics.Debug.WriteLine("Calling SetDefaultBackgroundOnStartup...");
            SetDefaultBackgroundOnStartup();

            // T·∫°o n·ªôi dung cho c√°c panel chi ti·∫øt
            TaoNoiDungPanelChiTiet();

            // T·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt ban ƒë·∫ßu t·ª´ ƒë·ªãa ƒëi·ªÉm hi·ªán t·∫°i
            _ = LoadInitialWeatherData();


            // T·∫°o file icon th·∫≠t
            TaoFileIconThuc();

            // Kh√¥ng ƒë·∫∑t ƒë·ªãa ƒëi·ªÉm m·∫∑c ƒë·ªãnh - ƒë·ªÉ tr·ªëng cho ƒë·∫øn khi API load

            // X√≥a g·ª£i √Ω t√¨m ki·∫øm
            System.Diagnostics.Debug.WriteLine("=== FORM1 CONSTRUCTOR END ===");
        }

        #region ===== 1Ô∏è‚É£ NH·∫¨P ƒê·ªäA ƒêI·ªÇM, T√åM KI·∫æM, L∆ØU ƒê·ªäA ƒêI·ªÇM, ƒê·ªîI ¬∞C/¬∞F =====

        private void Form1_Load(object sender, EventArgs e)
        {
            System.Diagnostics.Debug.WriteLine("=== FORM1_LOAD START ===");
            // Kh·ªüi t·∫°o d·ªØ li·ªáu ban ƒë·∫ßu
            CapNhatThoiGian();
            
            // Load danh s√°ch ƒë·ªãa ƒëi·ªÉm ƒë√£ l∆∞u t·ª´ DB
            NapDiaDiemDaLuu();
            
            // T·ª± ƒë·ªông load th·ªùi ti·∫øt v·ªã tr√≠ hi·ªán t·∫°i khi kh·ªüi ƒë·ªông
            LoadWeatherByIP();
            
            // Test background ngay l·∫≠p t·ª©c
            System.Diagnostics.Debug.WriteLine("Calling TestBackground...");
            TestBackground();
            
            // Force set background ngay trong Form1_Load
            System.Diagnostics.Debug.WriteLine("Calling ForceSetBackgroundInLoad...");
            ForceSetBackgroundInLoad();
            
            // ƒê·∫£m b·∫£o "üìç V·ªã tr√≠ hi·ªán t·∫°i" lu√¥n c√≥ trong danh s√°ch
            EnsureCurrentLocationInList();
            
            System.Diagnostics.Debug.WriteLine("=== FORM1_LOAD END ===");
        }

        private async void NutTimKiem_Click(object? sender, EventArgs e)
        {
            var tuKhoa = oTimKiemDiaDiem.Text?.Trim();
            if (string.IsNullOrWhiteSpace(tuKhoa))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p x√£/ph∆∞·ªùng, qu·∫≠n/huy·ªán, t·ªânh/th√†nh ƒë·ªÉ t√¨m ki·∫øm.", "Thi·∫øu th√¥ng tin",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            await TimKiemDiaDiem(tuKhoa);
        }

        private void listBoxDiaDiemDaLuu_SelectedIndexChanged(object sender, EventArgs e)
        {
            SuKienChonDiaDiemDaLuu();
        }
        #endregion

        #region ===== 2Ô∏è‚É£ G·ªåI API & TH√îNG TIN M√î T·∫¢ =====
        #endregion

        #region ===== 3Ô∏è‚É£ TH·ªúI TI·∫æT 24H & 5 NG√ÄY =====
        #endregion

        #region ===== 4Ô∏è‚É£ BI·ªÇU ƒê·ªí =====
        #endregion

        #region ===== 5Ô∏è‚É£ B·∫¢N ƒê·ªí =====

        private void LoadWindyMap(double lat, double lon)
        {
            EnsureWindyBrowser();
            if (windyView == null) return;

            string latStr = lat.ToString(System.Globalization.CultureInfo.InvariantCulture);
            string lonStr = lon.ToString(System.Globalization.CultureInfo.InvariantCulture);
            string embedUrl = $"https://embed.windy.com/embed2.html?key={WINDY_API_KEY}&lat={latStr}&lon={lonStr}&detailLat={latStr}&detailLon={lonStr}&zoom=7&overlay=temp&level=surface&menu=&message=true&marker=true&calendar=&pressure=true&type=map&location=coordinates&detail=true&metricWind=default&metricTemp=default";
            windyView.Source = new Uri(embedUrl);
        }
        #endregion

        #region ===== 6Ô∏è‚É£ BACKGROUND THAY ƒê·ªîI THEO TH·ªúI TI·∫æT =====

        private void InitializeBackgroundPictureBox()
        {
            // Kh√¥ng c·∫ßn t·∫°o PictureBox ri√™ng bi·ªát n·ªØa
            // Background s·∫Ω ƒë∆∞·ª£c set tr·ª±c ti·∫øp cho boCucChinh
            System.Diagnostics.Debug.WriteLine("ƒê√£ kh·ªüi t·∫°o background system cho boCucChinh");
        }

        private void ApplyRoundedCorners(Control control, int radius)
        {
            try
            {
                var path = new System.Drawing.Drawing2D.GraphicsPath();
                path.AddArc(0, 0, radius * 2, radius * 2, 180, 90);
                path.AddArc(control.Width - radius * 2, 0, radius * 2, radius * 2, 270, 90);
                path.AddArc(control.Width - radius * 2, control.Height - radius * 2, radius * 2, radius * 2, 0, 90);
                path.AddArc(0, control.Height - radius * 2, radius * 2, radius * 2, 90, 90);
                path.CloseAllFigures();
                control.Region = new System.Drawing.Region(path);
            }
            catch
            {
                // N·∫øu kh√¥ng th·ªÉ t·∫°o region, b·ªè qua
            }
        }

        private void CauHinhKhoiTao()
        {
            // Timer 1 gi·ªù
            dongHoCapNhat.Interval = 60 * 60 * 1000;
            dongHoCapNhat.Tick += async (s, e) => { await CapNhatThoiTiet(); };

            // Timer c·∫≠p nh·∫≠t th·ªùi gian m·ªói gi√¢y
            var timer = new System.Windows.Forms.Timer();
            timer.Interval = 1000;
            timer.Tick += (s, e) => CapNhatThoiGian();
            timer.Start();

            // C·∫≠p nh·∫≠t th·ªùi gian l·∫ßn ƒë·∫ßu
            CapNhatThoiGian();
        }

        private void thanhTrenCung_Paint(object sender, PaintEventArgs e)
        {

        }

        private void anhNenDong_Click(object sender, EventArgs e)
        {

        }
        #endregion

        #region ===== C√ÅC METHOD KH√ÅC =====

        private void SetTransparentBackColor(Control control, Color color)
        {
            try
            {
                control.BackColor = color;
            }
            catch (ArgumentException)
            {
                // N·∫øu control kh√¥ng h·ªó tr·ª£ trong su·ªët, d√πng m√†u tr·∫Øng m·ªù
                control.BackColor = Color.FromArgb(240, 240, 240);
            }
        }

        private void EnsureCurrentLocationInList()
        {
            System.Diagnostics.Debug.WriteLine("=== EnsureCurrentLocationInList START ===");
            System.Diagnostics.Debug.WriteLine($"ListBox items count: {listBoxDiaDiemDaLuu.Items.Count}");
            
            if (!listBoxDiaDiemDaLuu.Items.Contains("üìç V·ªã tr√≠ hi·ªán t·∫°i"))
            {
                listBoxDiaDiemDaLuu.Items.Insert(0, "üìç V·ªã tr√≠ hi·ªán t·∫°i");
                System.Diagnostics.Debug.WriteLine("‚úÖ Added 'üìç V·ªã tr√≠ hi·ªán t·∫°i' to list");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("‚è≠Ô∏è 'üìç V·ªã tr√≠ hi·ªán t·∫°i' already exists in list");
            }
            
            System.Diagnostics.Debug.WriteLine($"ListBox items count after: {listBoxDiaDiemDaLuu.Items.Count}");
            System.Diagnostics.Debug.WriteLine("=== EnsureCurrentLocationInList END ===");
        }

        private void CapNhatDanhSachDiaDiem()
        {
            listBoxDiaDiemDaLuu.Items.Clear();
            
            foreach (var location in savedLocationNames)
            {
                listBoxDiaDiemDaLuu.Items.Add(location);
            }
        }

        private void TaoNutDongForm()
        {
            var nutDong = new Button
            {
                Text = "‚úï",
                Size = new Size(30, 30),
                Location = new Point(this.Width - 35, 5),
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 12F, FontStyle.Bold),
                ForeColor = Color.White,
                BackColor = Color.FromArgb(200, 255, 0, 0),
                Anchor = AnchorStyles.Top | AnchorStyles.Right
            };

            nutDong.FlatAppearance.BorderSize = 0;
            nutDong.Click += (s, e) => this.Close();

            this.Controls.Add(nutDong);
            nutDong.BringToFront();
        }

        private async void CongTacDonVi_Click(object? sender, EventArgs e)
        {
            // ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i ƒë∆°n v·ªã
            donViCelsius = !donViCelsius;

            // C·∫≠p nh·∫≠t text c·ªßa button
            CongTacDonVi.Text = donViCelsius ? "¬∞C" : "¬∞F";

            await CapNhatThoiTiet();
        }

        private void TaoDuLieuMau5Ngay()
        {
            // ƒê·ªÉ tr·ªëng - ch·ªâ hi·ªÉn th·ªã khi c√≥ d·ªØ li·ªáu th·∫≠t t·ª´ API
            BangNhieuNgay.Controls.Clear();
        }

        private void TaoDuLieuMau24Gio()
        {
            // ƒê·ªÉ tr·ªëng - ch·ªâ hi·ªÉn th·ªã khi c√≥ d·ªØ li·ªáu th·∫≠t t·ª´ API
            BangTheoGio.Controls.Clear();
        }

        private void EnsureWindyBrowser()
        {
            if (windyView != null) return;

            windyView = new WebView2
            {
                Dock = DockStyle.Fill,
                Visible = false
            };

            // Th√™m v√†o tabMap khi ƒë√£ kh·ªüi t·∫°o t·ª´ Designer
            tabMap.Controls.Add(windyView);
            windyView.BringToFront();
        }

        private void ShowChart()
        {
            if (temperatureChart != null) temperatureChart.Visible = true;
            if (windyView != null) windyView.Visible = false;
        }

        private void ConvertDailyHighLowLabel(Label label, string newUnitSymbol)
        {
            // D·∫°ng: "Cao nh·∫•t: 30¬∞C\nTh·∫•p nh·∫•t: 24¬∞C" (h·ªó tr·ª£ c·∫£ ¬∫ v√† ch·ªØ th∆∞·ªùng, d·∫•u ph·∫©y)
            var text = label.Text;
            var regex = new System.Text.RegularExpressions.Regex(
                @"Cao\s*nh·∫•t:\s*(-?\d+(?:[\.,]\d+)?)\s*[¬∞¬∫]\s*([cCfF]).*?Th·∫•p\s*nh·∫•t:\s*(-?\d+(?:[\.,]\d+)?)\s*[¬∞¬∫]\s*([cCfF])",
                System.Text.RegularExpressions.RegexOptions.Singleline);
            var m = regex.Match(text);
            if (!m.Success) return;

            var highText = m.Groups[1].Value.Replace(',', '.');
            double high = double.Parse(highText, System.Globalization.CultureInfo.InvariantCulture);
            bool highIsC = m.Groups[2].Value.Equals("c", StringComparison.OrdinalIgnoreCase);
            var lowText = m.Groups[3].Value.Replace(',', '.');
            double low = double.Parse(lowText, System.Globalization.CultureInfo.InvariantCulture);
            bool lowIsC = m.Groups[4].Value.Equals("c", StringComparison.OrdinalIgnoreCase);

            double highConv = ConvertTemperatureFromText(high.ToString(System.Globalization.CultureInfo.InvariantCulture), highIsC);
            double lowConv = ConvertTemperatureFromText(low.ToString(System.Globalization.CultureInfo.InvariantCulture), lowIsC);

            // Duy tr√¨ c√πng ƒë·ªãnh d·∫°ng 2 d√≤ng
            label.Text = $"Cao nh·∫•t: {Math.Round(highConv)}{newUnitSymbol}\nTh·∫•p nh·∫•t: {Math.Round(lowConv)}{newUnitSymbol}";
        }

        private void CapNhatPanelChiTietMau(string nhietDo)
        {
            // ƒê·ªÉ tr·ªëng - ch·ªâ hi·ªÉn th·ªã khi c√≥ d·ªØ li·ªáu th·∫≠t t·ª´ API
        }

        private void CapNhatThoiTietTheoNgay(string ngay, string nhietDo, string trangThai, string icon)
        {
            // ƒê·ªÉ tr·ªëng - ch·ªâ hi·ªÉn th·ªã khi c√≥ d·ªØ li·ªáu th·∫≠t t·ª´ API
            BangTheoGio.Controls.Clear();
            BangNhieuNgay.Controls.Clear();
        }
        #endregion

    }
}