#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ s·∫Øp x·∫øp l·∫°i Form1.cs v√† Form1.Designer.cs theo th·ª© t·ª± ƒë√£ ƒë·ªãnh
"""

import re
import os

def reorganize_form1_cs():
    """S·∫Øp x·∫øp l·∫°i Form1.cs theo th·ª© t·ª± ƒë√£ ƒë·ªãnh"""
    
    # ƒê·ªçc file Form1.cs
    with open('Form1.cs', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # T√¨m c√°c method v√† s·∫Øp x·∫øp theo th·ª© t·ª±
    methods = {}
    
    # 1Ô∏è‚É£ Nh·∫≠p ƒë·ªãa ƒëi·ªÉm, t√¨m ki·∫øm, l∆∞u ƒë·ªãa ƒëi·ªÉm, ƒë·ªïi ¬∞C/¬∞F
    section1_methods = [
        'Form1_Load',
        'oTimKiemDiaDiem_KeyDown',
        'oTimKiemDiaDiem_KeyPress', 
        'NutTimKiem_Click',
        'nutLuuDiaDiem_Click',
        'nutChuyenDoiDiaDiem_Click',
        'nutXoaDiaDiem_Click',
        'listBoxDiaDiemDaLuu_SelectedIndexChanged',
        'LuuDiaDiem',
        'LuuDiaDiemSilent',
        'NapDiaDiemDaLuu',
        'SaveLocationsToFile',
        'LoadLocationsFromFile',
        'NormalizeName',
        'CoordinatesEqual'
    ]
    
    # 2Ô∏è‚É£ G·ªçi API & th√¥ng tin m√¥ t·∫£
    section2_methods = [
        'LoadInitialWeatherData',
        'LoadWeatherByIP',
        'LayDuLieuThoiTiet',
        'ParseKetQuaApi',
        'CapNhatThongTinChung',
        'CapNhatThoiTiet',
        'CapNhatThoiGian',
        'TaoNoiDungPanelChiTiet',
        'TaoFileIconThuc'
    ]
    
    # 3Ô∏è‚É£ Th·ªùi ti·∫øt 24h & 5 ng√†y
    section3_methods = [
        'HienThiDuBao24h',
        'HienThiDuBao5Ngay',
        'TaoPanelTheoGio',
        'TaoPanelNgay',
        'GetWeatherIconPath'
    ]
    
    # 4Ô∏è‚É£ Bi·ªÉu ƒë·ªì
    section4_methods = [
        'VeBieuDoNhietDo24h',
        'VeBieuDoNhietDo5Ngay',
        'InitializeChart',
        'CreateTemperatureChart'
    ]
    
    # 5Ô∏è‚É£ B·∫£n ƒë·ªì
    section5_methods = [
        'LoadBanDo',
        'CapNhatMarkerTheoViTri',
        'InitializeWebView2',
        'LoadWindyMap'
    ]
    
    # 6Ô∏è‚É£ Background thay ƒë·ªïi theo th·ªùi ti·∫øt
    section6_methods = [
        'CapNhatBackground',
        'CapNhatIconDong',
        'SetBackground',
        'SetDefaultBackgroundOnStartup',
        'TestBackground',
        'ForceSetBackgroundInLoad',
        'InitializeBackgroundPictureBox',
        'ApplyRoundedCorners',
        'ApDungStyleGlassmorphism',
        'CauHinhKhoiTao',
        'thanhTrenCung_Paint',
        'anhNenDong_Click'
    ]
    
    # T√¨m t·∫•t c·∫£ methods trong file
    method_pattern = r'(private\s+(?:async\s+)?(?:void|Task|Task<[^>]+>)\s+(\w+)\s*\([^)]*\)\s*\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\})'
    matches = re.findall(method_pattern, content, re.MULTILINE | re.DOTALL)
    
    # T·∫°o dictionary mapping method name -> full method
    for full_method, method_name in matches:
        methods[method_name] = full_method
    
    # T·∫°o n·ªôi dung m·ªõi v·ªõi th·ª© t·ª± ƒë√£ ƒë·ªãnh
    new_content = []
    
    # Th√™m ph·∫ßn ƒë·∫ßu (using, namespace, class declaration, fields)
    header_pattern = r'(.*?)(?=private\s+(?:async\s+)?(?:void|Task|Task<[^>]+>)\s+\w+\s*\()'
    header_match = re.search(header_pattern, content, re.MULTILINE | re.DOTALL)
    if header_match:
        new_content.append(header_match.group(1).strip())
    
    # Th√™m c√°c section theo th·ª© t·ª±
    sections = [
        ("1Ô∏è‚É£ NH·∫¨P ƒê·ªäA ƒêI·ªÇM, T√åM KI·∫æM, L∆ØU ƒê·ªäA ƒêI·ªÇM, ƒê·ªîI ¬∞C/¬∞F", section1_methods),
        ("2Ô∏è‚É£ G·ªåI API & TH√îNG TIN M√î T·∫¢", section2_methods),
        ("3Ô∏è‚É£ TH·ªúI TI·∫æT 24H & 5 NG√ÄY", section3_methods),
        ("4Ô∏è‚É£ BI·ªÇU ƒê·ªí", section4_methods),
        ("5Ô∏è‚É£ B·∫¢N ƒê·ªí", section5_methods),
        ("6Ô∏è‚É£ BACKGROUND THAY ƒê·ªîI THEO TH·ªúI TI·∫æT", section6_methods)
    ]
    
    for section_title, method_list in sections:
        new_content.append(f"\n        #region ===== {section_title} =====")
        
        for method_name in method_list:
            if method_name in methods:
                new_content.append(f"\n        {methods[method_name]}")
                del methods[method_name]  # X√≥a ƒë·ªÉ tr√°nh duplicate
        
        new_content.append("        #endregion")
    
    # Th√™m c√°c method c√≤n l·∫°i (kh√¥ng thu·ªôc section n√†o)
    if methods:
        new_content.append("\n        #region ===== C√ÅC METHOD KH√ÅC =====")
        for method_name, method_content in methods.items():
            new_content.append(f"\n        {method_content}")
        new_content.append("        #endregion")
    
    # Th√™m ph·∫ßn cu·ªëi (closing brace)
    new_content.append("\n    }\n}")
    
    # Ghi file m·ªõi
    with open('Form1_reorganized.cs', 'w', encoding='utf-8') as f:
        f.write('\n'.join(new_content))
    
    print("‚úÖ ƒê√£ t·∫°o Form1_reorganized.cs")

def reorganize_form1_designer():
    """S·∫Øp x·∫øp l·∫°i Form1.Designer.cs theo th·ª© t·ª± h·ª£p l√Ω"""
    
    with open('Form1.Designer.cs', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # T√¨m c√°c control declarations
    control_pattern = r'(private\s+\w+\.\w+\s+\w+;)'
    controls = re.findall(control_pattern, content)
    
    # S·∫Øp x·∫øp controls theo nh√≥m ch·ª©c nƒÉng
    search_controls = []
    main_controls = []
    detail_controls = []
    chart_controls = []
    map_controls = []
    background_controls = []
    
    for control in controls:
        control_name = control.split()[-1].rstrip(';')
        
        if any(x in control_name.lower() for x in ['timkiem', 'diaDiem', 'luu', 'chuyen', 'unit', 'toggle']):
            search_controls.append(control)
        elif any(x in control_name.lower() for x in ['tab', 'chart', 'map']):
            if 'chart' in control_name.lower():
                chart_controls.append(control)
            elif 'map' in control_name.lower():
                map_controls.append(control)
            else:
                main_controls.append(control)
        elif any(x in control_name.lower() for x in ['24', 'gio', '5', 'ngay', 'bang']):
            detail_controls.append(control)
        elif any(x in control_name.lower() for x in ['background', 'nen', 'anh']):
            background_controls.append(control)
        else:
            main_controls.append(control)
    
    # T·∫°o n·ªôi dung m·ªõi
    new_content = []
    
    # Header
    header_end = content.find('private System.Windows.Forms.Panel thanhTrenCung;')
    if header_end > 0:
        new_content.append(content[:header_end].strip())
    
    # Controls theo nh√≥m
    new_content.append("\n        #region ===== SEARCH & LOCATION CONTROLS =====")
    new_content.extend(search_controls)
    new_content.append("        #endregion")
    
    new_content.append("\n        #region ===== MAIN LAYOUT CONTROLS =====")
    new_content.extend(main_controls)
    new_content.append("        #endregion")
    
    new_content.append("\n        #region ===== DETAIL CONTROLS (24H & 5 DAYS) =====")
    new_content.extend(detail_controls)
    new_content.append("        #endregion")
    
    new_content.append("\n        #region ===== CHART CONTROLS =====")
    new_content.extend(chart_controls)
    new_content.append("        #endregion")
    
    new_content.append("\n        #region ===== MAP CONTROLS =====")
    new_content.extend(map_controls)
    new_content.append("        #endregion")
    
    new_content.append("\n        #region ===== BACKGROUND CONTROLS =====")
    new_content.extend(background_controls)
    new_content.append("        #endregion")
    
    # Footer
    new_content.append("\n    }\n}")
    
    # Ghi file m·ªõi
    with open('Form1.Designer_reorganized.cs', 'w', encoding='utf-8') as f:
        f.write('\n'.join(new_content))
    
    print("‚úÖ ƒê√£ t·∫°o Form1.Designer_reorganized.cs")

if __name__ == "__main__":
    print("üîÑ B·∫Øt ƒë·∫ßu s·∫Øp x·∫øp l·∫°i Form1.cs v√† Form1.Designer.cs...")
    
    try:
        reorganize_form1_cs()
        reorganize_form1_designer()
        print("\n‚úÖ Ho√†n th√†nh! C√°c file ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i:")
        print("   - Form1_reorganized.cs")
        print("   - Form1.Designer_reorganized.cs")
        print("\nüìù B·∫°n c√≥ th·ªÉ xem v√† so s√°nh v·ªõi file g·ªëc tr∆∞·ªõc khi thay th·∫ø.")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
